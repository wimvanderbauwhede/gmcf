#!/usr/bin/perl 
use warnings;
use strict;
# Preprocessor for Gannet Intermediate Representation language.

use File::Copy;
our $VERSION = qw('0.0.1');

use Data::Dumper;
use Getopt::Std;

#-p: print out parse tree BROKEN
#-e: export to text format BROKEN

# -----------------------------------------------------------------------------
use lib '.', '..', $ENV{'GMCF_DIR'};
use GannetPP::Config qw( $verbose $basedir );
use GannetPP::Expander qw( gen_expander );
main();

sub main {

	@ARGV or die "Please provide the input file name (.mas)\n";

	(
		my $infile,
		my $libfiles,
		my $pp,
		$verbose,
        my $clean
	) = process_commandline();

#    if ($clean) {
#        exit;
#    }
	if ( -e $infile ) {

		my $name = $infile;
		$name =~ s/^.*\///;
		$name =~ s/\.ptd//;

		my $rc_def_lines  = [];
		my $rc_inst_lines = [];
		my $top_nets      = [];
        my $meta_instrs =[];
		my @mas_lines = ();		
		my $retval = open( my $PTD, '<', $infile );
		die "opening of $infile failed." if not defined $retval;
		while ( my $line = <$PTD> ) {
			# minimal preprocessing: strip blank and comment lines 
			next if $line =~ /^\s*$/;
			next if $line =~ /^\s*\#/;
			push @mas_lines, $line;
		}
		close $PTD;

			# we generate a module GannetPP::Tmp::Generator on the fly
			gen_expander( $name, \@mas_lines );

			# then use it
			eval( "
					use GannetPP::Tmp::Generator qw( expand );
					" );
				
			@mas_lines = GannetPP::Tmp::Generator::expand();
			
			if ($pp) {
				print ";*** Code generated by $0 from $infile at ".(scalar localtime)."  ***\n";
				show(@mas_lines);
			} else {
                my $tdfile=$infile;
                $tdfile=~s/\.\w+$/.td/;
                open my $TD,'>',$tdfile;
				print $TD ";*** Code generated by $0 from $infile at ".(scalar localtime)."  ***\n";
                for my $line (@mas_lines) {
                    chomp $line;
                    next unless $line;
                    print $TD "$line\n";
                }
                close $TD;
            }
    }			
}

# -----------------------------------------------------------------------------
#
# Subroutines
#

sub process_commandline {
	use Getopt::Long qw(:config  no_ignore_case );

	my $infile   = '';
	my @libfiles = ();
    $verbose =0;    
    my $clean=0;
    my $pp =0;
	my $help     = 0;

    
	my $result = GetOptions(
		'in=s'     => \$infile,
		"lib=s"    => \@libfiles,
		'verbose'  => \$verbose,
        'clean' => \$clean,
		'print'    => \$pp,
		'help'     => \$help
	);
	if ($help) {
		die <<HELP;
Gannet IR Preprocessor
$0 [opts] [file.mas]
-p: print out generated code to STDOUT i.o. to .td file
-l [list of library files] (not yet supported)
-v: verbose (for debugging)
-c: clean up generated files

HELP
	}
	if ( $infile eq '' && @ARGV) {
		$infile = shift @ARGV;
		$infile =~ s/^\.\///;
	}

	return ( $infile, \@libfiles, $pp, $verbose, $clean );

}

sub show {
	for my $line (@_) {
		chomp $line;
        next unless $line;
		print "$line\n";
	}
}
